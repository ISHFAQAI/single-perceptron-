# -*- coding: utf-8 -*-
"""scratchpad

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/empty.ipynb
"""

# Single unit perceptron
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import Perceptron
from mlxtend.plotting import plot_decision_regions
from sklearn.preprocessing import LabelEncoder

df=pd.read_csv('/content/students_gsheet.csv')

# Select 'GPA' and 'CGPA' as features (X)
X = df[['GPA', 'CGPA']]
# Convert the target variable 'PlacementStatus' to numerical using LabelEncoder
y = df.iloc[:,-1]

le = LabelEncoder()
y_encoded = le.fit_transform(y)


p = Perceptron()
p.fit(X,y_encoded)

print(p.coef_)
print(p.intercept_)
z=p.score(X,y_encoded)
print("accuracy score is",z)

plot_decision_regions(X.values, y_encoded, clf=p, legend=2)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.linear_model import Perceptron
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import pandas as pd

# --- Data Loading and Selection ---
file_path = "/content/students_gsheet.csv"
try:
    df = pd.read_csv(file_path)

    # Assumption: First two columns are features (X) for 2D plotting,
    # and the last column is the target (y).
    if df.shape[1] < 3:
        raise ValueError("CSV must have at least 3 columns for 2D visualization (2 features + 1 target).")

    # Select 'GPA' and 'CGPA' as features (X)
    X = df[['GPA', 'CGPA']].values
    # Convert the last column (target) into binary labels (0, 1, 2...)
    y = pd.factorize(df.iloc[:, -1])[0]

except (FileNotFoundError, ValueError) as e:
    print(f"Error loading/processing CSV: {e}. Using synthetic data instead.")
    # Fallback to synthetic data if file or format is problematic
    X, y = make_classification(n_samples=100, n_features=2, n_informative=2,
                               n_redundant=0, n_classes=2, n_clusters_per_class=1,
                               random_state=42, hypercube=False, class_sep=1.5)


# Data Splitting
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Model Initialization and Training
model = Perceptron(max_iter=1000, eta0=1.0, random_state=42, tol=1e-3)
model.fit(X_train, y_train)

# Evaluation
accuracy = accuracy_score(y_test, model.predict(X_test))
print(f"Accuracy: {accuracy * 100:.2f}%")

# Visualization (using the 2 features selected above)
plt.figure(figsize=(10, 7))
h = .02
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
Z = model.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)

plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.RdBu)
plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=plt.cm.RdBu, marker='o', edgecolor='k', label='Training Data')
plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap=plt.cm.RdBu, marker='s', edgecolor='k', label='Test Data')
# Use column names from the CSV if successfully loaded, otherwise default labels
if 'df' in locals() and df.shape[1] >= 2:
    # Update xlabel and ylabel to reflect the selected features
    plt.xlabel('GPA')
    plt.ylabel('CGPA')
else:
    plt.xlabel("Feature 1")
    plt.ylabel("Feature 2")

plt.title(f"Perceptron Classification (Accuracy: {accuracy * 100:.2f}%)")
plt.legend()
plt.grid(True)
plt.show()