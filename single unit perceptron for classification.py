# -*- coding: utf-8 -*-
"""scratchpad

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/empty.ipynb
"""

# Single unit perceptron
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import Perceptron
from mlxtend.plotting import plot_decision_regions
from sklearn.preprocessing import LabelEncoder

df=pd.read_csv('/content/students_gsheet.csv')

# Select 'GPA' and 'CGPA' as features (X)
X = df[['GPA', 'CGPA']]
# Convert the target variable 'PlacementStatus' to numerical using LabelEncoder
y = df.iloc[:,-1]

le = LabelEncoder()
y_encoded = le.fit_transform(y)


p = Perceptron()
p.fit(X,y_encoded)

print(p.coef_)
print(p.intercept_)
z=p.score(X,y_encoded)
print("accuracy score is",z)

plot_decision_regions(X.values, y_encoded, clf=p, legend=2)

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import Perceptron
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load dataset or create synthetic data if not found
try:
    df = pd.read_csv("/content/Placement.csv")
    X = df[['GPA', 'CGPA']].values
    y = pd.factorize(df.iloc[:, -1])[0]
except Exception as e:
    print(f"Error loading file: {e}. Using synthetic data.")
    X, y = make_classification(n_samples=100, n_features=2, n_informative=2,
                               n_redundant=0, n_classes=2, random_state=42)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Perceptron model
model = Perceptron(max_iter=1000, eta0=1.0, random_state=42)
model.fit(X_train, y_train)

# Accuracy
acc = accuracy_score(y_test, model.predict(X_test))
print(f"Accuracy: {acc*100:.2f}%")

# Visualization
x_min, x_max = X[:,0].min()-1, X[:,0].max()+1
y_min, y_max = X[:,1].min()-1, X[:,1].max()+1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02),
                     np.arange(y_min, y_max, 0.02))
Z = model.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)

plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.RdBu)
plt.scatter(X_train[:,0], X_train[:,1], c=y_train, cmap=plt.cm.RdBu, edgecolor='k', label='Train')
plt.scatter(X_test[:,0], X_test[:,1], c=y_test, cmap=plt.cm.RdBu, marker='s', edgecolor='k', label='Test')
plt.xlabel('GPA')
plt.ylabel('CGPA')
plt.title(f'Perceptron Classification (Accuracy: {acc*100:.2f}%)')
plt.legend()
plt.show()